include layout

link(rel='stylesheet', href='/stylesheets/software_style.css')

block content
  h1
    i software

  a(href='https://github.com/sknop8' target='_blank') github
  br
  a(href='mailto:sknop8@gmail.com') contact
    
  br
  br
  
  - var path = 'images/software'

  div.project
    p.title Donation Tracking and Recruitment Management Web App
    p.blurb Technical Lead, Full Stack Engineer for <a href='hack4impact.org' target='_blank'>Hack4Impact</a>
    p.date Spring 2018
    //- img(data-src='#{path}/')
    p.description. 
      As the technical lead of a team of four, I oversaw the technical completion of this project for <a href='https://breadrosesfund.org/' target='_blank'>Bread & Roses Community Fund</a>, a local Philadelphia nonprofit that supports community-based movements for racial equity and economic opportunity through fundraising and grantmaking. My responsibilities included leading technical infrastructure decisions, mentoring other members, assigning weekly tasks, and communicating the project scope and details to the client.
      <br><br>
      <strong><i>The Problem</i></strong><br>
      We built a Flask web application specifically for Bread & Roses' <a href='https://breadrosesfund.org/about/giving-project/' target='_blank'>Giving Project</a>, to help out with their overloaded recruitment process and longer-term donation tracking. The Giving Project seeks to bring together a group of diverse, passionate individuals, so cohort balance is a huge consideration in recruitment. 
      <br><br>
      <strong><i>The Product</i></strong><br>
      We built a <strong>recruitment management system</strong> that allows admins to track applicants, see overall cohort statistics, and search for and manage previous applicants. With this system, no applicant gets lost through the cracks, and balancing a new cohort becomes less of a headache.
      <br><br>
      We also built a <strong>donor tracking system</strong> that allows participants in the Giving Project to track their donors from first communication up until the donation actually makes it into the bank. We were influenced by Asana for the design, and added special mechanisms between columns to allow the user to specify new information (such as the date, and amount pledged/donated) before moving cards to a new column.
      <br><br>
      <strong><i>Technologies Used</i></strong><br>
      This application was built off of <a href='https://github.com/hack4impact/flask-base' target='_blank'>flask-base</a>, a Hack4Impact open source Flask boilerplate app. It was written in Python and JavaScript, using Jinja templating and CSS.
      <br><br>
      <strong><i>See It Live</i></strong><br>
      We deployed the product in July 2018 at <a href='https://giving-project.herokuapp.com/' target='_blank')>giving-project.herokuapp.com</a>! The application is only accessible to admins and participants, but feel free to check out the landing page and interest form. 


  div.project
    p.title Conditional Application Processing Software
    p.blurb Technical Lead, Full Stack Engineer for <a href='hack4impact.org' target='_blank'>Hack4Impact</a>
    p.date Fall 2017
    //- img(data-src='#{path}/')
    p.description. 
       As the technical lead of a team of five, I oversaw the technical aspects of this project for <a href='https://www.habitatphiladelphia.org/' target='_blank'>Habitat for Humanity Philadelphia</a>, the Philly chapter of Habitat for Humanity, a global nonprofit housing organization with the vision of a world where everyone has a decent place to live.
       <br><br>
       <strong><i>The Problem</i></strong><br>
       The application process for Habitat's homeownership and home repair programs is complex and calculation intensive because of the various financial history, income, and background information needed to check for an applicant's eligibility for Habitat's program. Habitat relies on its volunteers to complete these background checks and calculations - an inefficient and error-prone process.
       <br><br>
       <strong><i>The Product</i></strong><br>
        We sought to solve Habitat's application process bottleneck by building a completely <strong>customizable, conditional application processing software</strong>.
        <br><br>
        With this system, an admin can specify conditional formulae (like in Excel) that process each round of inputs in an application, automatically doing the calculations that would have been done by hand for each level of background checks. Admins can also customize forms and their order to represent each phase of checks. 
        <br><br>
        <strong><i>Technologies Used</i></strong><br>
        This application was built off of <a href='https://github.com/hack4impact/flask-base' target='_blank'>flask-base</a>, a Hack4Impact open source Flask boilerplate app. It was written in Python and JavaScript, using Jinja templating and CSS.

        //- We deployed this product in February 2018 
        

  div.project
    p.title Procedural City
    p.blurb 3D city generated using shape grammars
    p.date Spring 2017
    img(data-src='#{path}/city1.png')
    p.description.
      For this project, I designed a <a href='https://en.wikipedia.org/wiki/Shape_grammar' target='_blank'>shape grammar</a> that creates urban buildings, and designed a city layout to place the buildings generated by my shape grammar. The overall result is a procedurally generated city, which I named Suzville!
      <br><br>
      The shape grammar parser that I wrote in order to be able to create the city is a modified version of the L-System parser I created in a previous <a href='http://github.com/sknop8/LSystems' target='_blank'>L-System project</a>.
      <br><br>
      The specific grammar rules I used, and more about my implementation and design choices can be found in the <a href='http://github.com/sknop8/ProceduralCity' target='_blank'>github repo</a> :)
      <br><br>
      This project was written primarily using <a href='https://threejs.org/' target='_blank'>ThreeJS</a>, a 3d library for JavaScript. I created this project in the context of the experimental (CIS 700) Procedural Graphics class taught in the Spring of 2017.

  script(src="https://cdnjs.cloudflare.com/ajax/libs/vanilla-lazyload/8.7.1/lazyload.min.js")
  script.
    new LazyLoad();
